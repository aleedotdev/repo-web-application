import { cva } from "class-variance-authority";
import React from "react";

import type { VariantProps } from "class-variance-authority";

const button = cva("button", {
  variants: {
    variant: {
      primary: [
        "text-lg",
        "text-white",
        "rounded-[12px]",
        "truncate",
        "bg-orange",
        "cursor-pointer",
        "transition-all",
        "ease-in-out",
        "duration-300",
        "relative",
        "overflow-hidden",
        'before:content-[""]',
        "before:absolute",
        "before:inset-0",
        "before:bg-gradient-to-r",
        "before:from-transparent",
        "before:via-white/20",
        "before:to-transparent",
        "before:transition-transform",
        "before:duration-1000",
        "before:ease-in-out",
        "before:pointer-events-none",
        "before:transform",
        "before:-translate-x-full",
        "before:-skew-x-12",
        "hover:before:translate-x-full",
        "disabled:opacity-50",
        "disabled:bg-dark-gray",
        "disabled:cursor-not-allowed",
        "disabled:hover:before:-translate-x-full",
      ],
      secondary: [
        "text-lg",
        "bg-white",
        "text-black",
        "ease-in-out",
        "duration-300",
        "cursor-pointer",
        "transition-all",
        "rounded-[12px]",
        "relative",
        "overflow-hidden",
        'before:content-[""]',
        "before:absolute",
        "before:inset-0",
        "before:bg-gradient-to-r",
        "before:from-transparent",
        "before:via-black/10",
        "before:to-transparent",
        "before:transition-transform",
        "before:duration-1000",
        "before:ease-in-out",
        "before:pointer-events-none",
        "before:transform",
        "before:-translate-x-full",
        "before:-skew-x-12",
        "hover:before:translate-x-full",
        "disabled:opacity-50",
        "disabled:bg-dark-gray",
        "disabled:cursor-not-allowed",
        "disabled:hover:before:-translate-x-full",
      ],
      danger: [
        "bg-red",
        "text-white",
        "border-none",
        "rounded-[12px]",
        "transition-all",
        "ease-in-out",
        "duration-300",
        "relative",
        "overflow-hidden",
        'before:content-[""]',
        "before:absolute",
        "before:inset-0",
        "before:bg-gradient-to-r",
        "before:from-transparent",
        "before:via-white/20",
        "before:to-transparent",
        "before:transition-transform",
        "before:duration-1000",
        "before:ease-in-out",
        "before:pointer-events-none",
        "before:transform",
        "before:-translate-x-full",
        "before:-skew-x-12",
        "hover:before:translate-x-full",
        "cursor-pointer",
        "disabled:bg-dark-gray",
        "disabled:cursor-not-allowed",
        "disabled:opacity-50",
        "disabled:hover:before:-translate-x-full",
      ],
      outlined: [
        "bg-white",
        "text-dark-gray",
        "border",
        "truncate",
        "border-gray",
        "rounded-[12px]",
        "cursor-pointer",
        "transition-all",
        "ease-in-out",
        "duration-300",
        "relative",
        "overflow-hidden",
        'before:content-[""]',
        "before:absolute",
        "before:inset-0",
        "before:bg-gradient-to-r",
        "before:from-transparent",
        "before:via-black/10",
        "before:to-transparent",
        "before:transition-transform",
        "before:duration-1000",
        "before:ease-in-out",
        "before:pointer-events-none",
        "before:transform",
        "before:-translate-x-full",
        "before:-skew-x-12",
        "hover:before:translate-x-full",
        "hover:bg-[#F5F3F7]",
        "disabled:bg-dark-gray",
        "disabled:cursor-not-allowed",
        "disabled:opacity-50",
        "disabled:hover:before:-translate-x-full",
      ],
    },
    size: {
      small: ["text-sm", "py-2", "px-4"],
      medium: ["text-lg", "py-3", "px-6"],
    },
  },
  compoundVariants: [{ variant: "primary", size: "medium" }],
  defaultVariants: {
    variant: "primary",
    size: "medium",
  },
});

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof button> {}

export const Button: React.FC<ButtonProps> = ({
  className,
  variant,
  size,
  ...props
}) => <button className={button({ variant, size, className })} {...props} />;
